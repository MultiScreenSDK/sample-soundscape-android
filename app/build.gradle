buildscript {
    repositories {
        maven { url 'http://repo1.maven.org/maven2' }
        mavenLocal()
        mavenCentral()
    }
}
apply plugin: 'android'

repositories {
    maven { url 'https://github.com/donnfelker/mvn-repo/raw/master/' }
    mavenLocal()
    mavenCentral()
}

version = '1.0'
ext {
    appName = parent.name
    apkOutputDir = "${buildDir}/outputs/apk"
    distDir = '../dist'
}

dependencies {
    compile 'com.android.support:appcompat-v7:22.1.+'
    compile 'com.android.support:cardview-v7:22.1.1'
    compile 'com.android.support:recyclerview-v7:22.1.1'
    compile 'de.greenrobot:eventbus:2.4.0'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.github.traex.rippleeffect:library:1.3'
    compile 'com.github.rey5137:material:1.1.1'
    compile 'com.daimajia.swipelayout:library:1.2.0@aar'
//    androidTestCompile 'junit:junit:4.11'
//    androidTestCompile 'org.hamcrest:hamcrest-library:1.3'
//    androidTestCompile 'org.mockito:mockito-core:1.9.5'
    compile files('libs/android-msf-api-2.0.16.jar')
}

android {
    compileSdkVersion 21
    buildToolsVersion '22.0.1'
    defaultConfig {
        applicationId "com.samsung.soundscape"
        minSdkVersion 15
        targetSdkVersion 21
        versionCode 102
        versionName version
    }
    packagingOptions {
        // Exclude file to avoid
        // Error: Duplicate files during packaging of APK
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
    // signingConfigs {
    // release {
    // storeFile file(System.getenv('ANDROID_KEYSTORE_PATH'))
    // storePassword System.getenv('ANDROID_STORE_PASS')
    // keyAlias System.getenv('ANDROID_KEY_ALIAS')
    // keyPassword System.getenv('ANDROID_KEY_PASS')
    // }
    // }
    lintOptions {
        abortOnError false
    }
    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            minifyEnabled false
            // zipAlign false // this is default for debug
        }
        release {
            // runProguard true
            // proguardFile '..\proguard.cfg'
            // signingConfig signingConfigs.release
            // zipAlign true // this is default for release
            // testPackageName 'com.samsung.soundscape.tests'
            // testInstrumentationRunner 'android.test.InstrumentationTestRunner' // this is the default
        }
    }
    productFlavors {
    }
    applicationVariants.all { variant ->
        //Check if an applicationName property is supplied; if not use the name of the parent project.
        if (project.hasProperty("applicationName")) {
            appName = applicationName
        } else {
            appName = parent.name
        }

        def apkName
        variant.outputs.each { output ->
            //If there's no ZipAlign task it means that our artifact will be unaligned and we need to mark it as such.
            if (output.zipAlign) {
                apkName = "${appName}-${output.baseName}-${variant.versionName}.apk"
            } else {
                apkName = "${appName}-${output.baseName}-${variant.versionName}-unaligned.apk"
            }
            output.outputFile = new File(output.outputFile.parent, apkName)
        }
    }
}

task dist(type: Copy) {
    println "copy APK to dist folder"

    from(apkOutputDir) {
        include "${appName}*.apk"
    }
    into distDir
}

dist.dependsOn assembleDebug


task release(type: Copy) {
    println "copy APK and rename"

    from(apkOutputDir) {
        include "${appName}*.apk"
    }
    into distDir

    rename { String fileName ->
        "${appName}-latest.apk"
    }
}
release.dependsOn assembleDebug

